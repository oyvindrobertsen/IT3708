from __future__ import print_function, division

from numpy import array

from beer_tracker import BeerTrackerProblem, BeerTrackerWorld
from ctrnn.neural_network import NeuralNetwork, Neuron as N, BiasNeuron as B


nn = NeuralNetwork((
    (N(), N(), N(), N(), N(), B(1.0)),
    (N(), N(), B(1.0)),
    (N(), N())
))

p1 = {
    'inter': [
        array(
            [[-4.60784314, -4.33333333],
             [4.41176471, 4.29411765]]
        ),
        array(
            [[2.25490196, 1.54901961],
             [-2.1372549, -2.96078431]]
        )
    ],
    'cross': [
        array(
            [[4.01960784, -0.7254902],
             [-3.74509804, -4.33333333],
             [-0.52941176, -1.78431373],
             [1.43137255, -1.43137255],
             [2.33333333, -4.68627451],
             [-1.03921569, -3.98039216]]
        ),
        array(
            [[-0.21568627, 3.94117647],
             [-2.49019608, -1.31372549],
             [-4.96078431, -2.76470588]]
        )
    ],
    'ts': [
        1.2980392156862746, 1.192156862745098, 1.192156862745098, 1.192156862745098, 1.1607843137254903,
        1.1294117647058823, 1.9607843137254903,
        1.396078431372549, 1.1686274509803922
    ],
    'gains': [
        3.9019607843137254, 1.0784313725490196, 3.83921568627451, 3.1333333333333333, 2.6,
        3.164705882352941, 1.188235294117647,
        2.4117647058823533, 2.7254901960784315
    ]
}

p2 = {
    'inter': [
        array([[-1.62745098, -0.09803922],
               [-0.25490196, -1.78431373]]),
        array([[4.45098039, -2.92156863],
               [-2.37254902, -2.76470588]])
    ],
    'cross': [
        array([[-3.31372549, -2.1372549],
               [0.92156863, 1.19607843],
               [3.78431373, -2.45098039],
               [1.03921569, 2.60784314],
               [-4.33333333, -4.92156863],
               [-0.29411765, -1.39215686]]),
        array([[0.96078431, -4.80392157],
               [4.17647059, -4.88235294],
               [-4.41176471, 1.23529412]])
    ],
    'ts': [1.388235294117647, 1.1294117647058823,
           1.2705882352941176, 1.815686274509804,
           1.9411764705882353, 1.1725490196078432,
           1.2117647058823529, 1.5372549019607842,
           1.9803921568627452],
    'gains': [1.0156862745098039, 4.247058823529412,
              2.1764705882352944, 2.317647058823529,
              2.2705882352941176, 2.8352941176470585,
              2.6470588235294117, 1.2509803921568627,
              4.027450980392157]
}

nn.assign_phenotype(p1)


def input(l):
    nn.propagate_input(l)
    for layer in nn.layers:
        print('[{}]'.format('\t'.join(str(round(neuron.output, 5)) for neuron in layer)))
    print()


if __name__ == "__main__":
    problem = BeerTrackerProblem(
        world=BeerTrackerWorld(30, 15, wrap=True),
        neural_network=NeuralNetwork((
            (N(), N(), N(), N(), N(), B(1.0)),
            (N(), N(), B(1.0)),
            (N(), N())
        )),
        n_bits=8
    )

    problem.visualization(phenotype=p2)

'''
>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.8495 0.00174 1.0]
[0.00015        0.42772]

>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.00016        1e-05   1.0]
[0.0    8e-05]

>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.73138        1e-05   1.0]
[0.0    0.25196]

>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.00066        0.0     1.0]
[0.0    0.00024]

>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.76093        0.0     1.0]
[0.0    0.34107]

>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.00046        0.0     1.0]
[0.0    0.00014]

>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.75375        0.0     1.0]
[0.0    0.30918]

>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.0005 0.0     1.0]
[0.0    0.00017]

>>> input([0, 0, 0, 0, 0])
[0.5    0.5     0.5     0.5     0.5     1.0]
[0.75552        0.0     1.0]
[0.0    0.31885]
'''

'''
>>> input([0, 0, 0, 0, 1])
[0.50014        0.5     0.5     0.5     0.90377 1.0]
[0.97782        0.0     1.0]
[0.0    0.78831]

>>> input([0, 1, 0, 0, 0])
[0.50003        0.71189 0.5     0.5     0.57695 1.0]
[1e-05  0.0     1.0]
[0.0    1e-05]

>>> input([0, 1, 0, 0, 0])
[0.50001        0.74085 0.5     0.5     0.51074 1.0]
[0.1399 0.0     1.0]
[0.0    0.00106]

>>> input([0, 1, 0, 0, 0])
[0.5    0.74534 0.5     0.5     0.50149 1.0]
[0.07084        0.0     1.0]
[0.0    0.00112]

>>> input([0, 1, 0, 0, 0])
[0.5    0.74606 0.5     0.5     0.50021 1.0]
[0.14369        0.0     1.0]
[1e-05  0.0022]

>>> input([0, 1, 0, 0, 0])
[0.5    0.74617 0.5     0.5     0.50003 1.0]
[0.06676        0.0     1.0]
[1e-05  0.00119]
'''

'''
>>> input([0, 1, 1, 1, 0])
[0.5    0.71189 0.96159 0.93266 0.5     1.0]
[0.6359 0.00042 1.0]
[0.00017        0.09531]

>>> input([0, 1, 1, 1, 0])
[0.5    0.74085 0.97679 0.95487 0.5     1.0]
[0.00053        0.0     1.0]
[1e-05  0.0006]

>>> input([0, 1, 1, 1, 0])
[0.5    0.74534 0.97861 0.95772 0.5     1.0]
[0.42193        0.0     1.0]
[1e-05  0.02545]

>>> input([0, 1, 1, 1, 0])
[0.5    0.74606 0.97889 0.95816 0.5     1.0]
[0.00715        0.0     1.0]
[1e-05  0.00084]

>>> input([0, 1, 1, 1, 0])
[0.5    0.74617 0.97893 0.95823 0.5     1.0]
[0.47299        0.0     1.0]
[1e-05  0.04196]

>>> input([0, 1, 1, 1, 0])
[0.5    0.74619 0.97894 0.95824 0.5     1.0]
[0.0038 0.0     1.0]
[1e-05  0.00078]

>>> input([0, 1, 1, 1, 0])
[0.5    0.7462  0.97894 0.95825 0.5     1.0]
[0.46556        0.0     1.0]
[1e-05  0.03893]
'''